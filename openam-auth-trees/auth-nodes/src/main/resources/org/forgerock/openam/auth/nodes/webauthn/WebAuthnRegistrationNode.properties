#
# The contents of this file are subject to the terms of the Common Development and
# Distribution License (the License). You may not use this file except in compliance with the
# License.
#
# You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
# specific language governing permission and limitations under the License.
#
# When distributing Covered Software, include this CDDL Header Notice in each file and include
# the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
# Header, with the fields enclosed by brackets [] replaced by your own identifying
# information: "Portions copyright [year] [name of copyright owner]".
#
# Copyright 2018-2023 ForgeRock AS.
#

nodeDescription=WebAuthn Registration Node
nodeHelp=Allows users of supported clients to register FIDO2 devices for use during authentication.

success=Success
failure=Failure
unsupported=Unsupported
error=Client Error

relyingPartyDomain=Relying party identifier
relyingPartyDomain.help=The domain against which to register devices, if blank AM will make a best guess at the domain.
relyingPartyName=Relying party
relyingPartyName.help=The name of the Relying Party to present, this could be the name of the organisation, realm, etc.
origins=Origin domains
origins.help=A set of fully-qualified URLs of accepted origins, e.g. http://app.example.com:443. If empty, \
  the accepted origin is the incoming request origin.
acceptedSigningAlgorithms=Accepted signing algorithms
userVerificationRequirement=User verification requirement
userVerificationRequirement.help=If specified as REQUIRED, authenticators that don't verify user identity are \
 filtered out and should not be selectable by the user.
attestationPreference=Preferred mode of attestation
authenticatorAttachment=Authentication attachment
authenticatorAttachment.help=If specified, the authenticators will be filtered out that don't match the attachment \
 type. A PLATFORM authenticator is part of the device, and CROSS_PLATFORM authenticator can be removed from a device \
  and used elsewhere, e.g. via USB.
timeout=Timeout
timeout.help=The number of seconds to wait for a valid WebAuthn authenticator to be registered before failing.
excludeCredentials=Limit registrations
excludeCredentials.help=If enabled, each authenticator may only be registered against a user's profile once.
requiresResidentKey=Username to device
requiresResidentKey.help=Requests that the username is stored by the device. Devices which do not support \
  storing and providing the username will be unable to utilise the node while it is operating in this mode.
generateRecoveryCodes=Generate recovery codes
generateRecoveryCodes.help=If enabled, the success outcome's transient state will contain a set of recovery codes. If \
  this success outcome is passed into a Recovery Code Display Node, these codes will be presented to the user. \
  A user may use recovery codes to bypass the WebAuthn authentication node in the event they have lost their \
  authenticator. A set of recovery codes is shared among all registered WebAuthn authenticators, with the \
  latest-generated set being the only valid set of codes. This will not occur if the option to store the device \
  data in the transient state is also selected.
storeAttestationDataInTransientState=Store data in transient state
storeAttestationDataInTransientState.help=If enabled, the information provided by the device to the node will be \
  stored in the transient state for later analysis by subsequent nodes using the key 'webauthnData'. Additionally \
  the type of attestation achieved (BASIC, CA, SELF, etc.) will be stored using the key 'webauthnAttestationType'.
postponeDeviceProfileStorage=Store device data in transient state
postponeDeviceProfileStorage.help=If enabled, the device will not be stored directly to the user profile upon successful \
  completion of the node. Rather, the device information will be placed into the transient state for later storage \
  by subsequent nodes using the key 'webauthnDeviceData'. The provided 'WebAuthn Device Storage Node' can be used for \
  this purpose.
asScript=Return challenge as JavaScript
asScript.help=If enabled, the node will return its challenge as a fully encapsulated client-side JavaScript that will \
  interact directly with the WebAuthn API and submit the response back. If disabled, the node will return the \
  challenge and associated data in a metadata node, and the custom UI will use that to interact with the WebAuthn \
  API itself.
displayNameSharedState=Shared state attribute for display name
displayNameSharedState.help=This field determines the value of the user's displayName, used when the user's username is \
  stored in the device. If left blank, the display name will be set to the same as the user's username. If set to \
  a value the corresponding shared state value will be used instead. If there is no value found in the shared state \
  for the provided key, the display name will be set to the same as the user's username.

trustStoreAlias=Trust Store alias
trustStoreAlias.help=The alias of the realm trust store which contains the secrets necessary for performing validation \
  of a supplied attestation certificate. The alias name must only contain the characters a-z and the . symbol.

enforceRevocationCheck=Enforce revocation check
enforceRevocationCheck.help=Whether to enforce the checking of revocation entries from certificates. If this is set to \
  true, then any attestation certificate's trust chain MUST have a CRL or OCSP entry that can be verified by AM during \
  processing. If this is set to false, then presented certificates will not be checked for revocation. \
  Certificates downloaded from the FIDO Metadata Service may not have a CRL/OCSP entry.

newDeviceName=New Security Key

maxSavedDevices=Maximum Saved Devices
maxSavedDevices.help=Specify the maximum number of WebAuthn devices to save in a user's profile. 0 for unlimited.

exceedDeviceLimit=Exceed Device Limit

