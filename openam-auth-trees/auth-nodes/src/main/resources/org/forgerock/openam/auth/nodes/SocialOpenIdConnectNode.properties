#
# The contents of this file are subject to the terms of the Common Development and
# Distribution License (the License). You may not use this file except in compliance with the
# License.
#
# You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
# specific language governing permission and limitations under the License.
#
# When distributing Covered Software, include this CDDL Header Notice in each file and include
# the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
# Header, with the fields enclosed by brackets [] replaced by your own identifying
# information: "Portions copyright [year] [name of copyright owner]".
#
# Copyright 2018 ForgeRock AS.
#


nodeDescription=OpenID Connect

clientId=Client ID
clientId.help=OAuth client_id parameter<p> For more information on the OAuth client_id parameter refer to the RFC 6749 (http://tools.ietf.org/html/rfc6749#section-2.3.1), section 2.3.1
clientSecret=Client Secret
clientSecret.help=OAuth client_secret parameter <p>For more information on the OAuth client_id parameter refer to the RFC 6749 (http://tools.ietf.org/html/rfc6749#section-2.3.1), section 2.3.1
authorizeEndpoint=Authentication Endpoint URL
authorizeEndpoint.help=OAuth authentication endpoint URL <p> This is the URL endpoint for OAuth authentication provided by the OAuth Identity Provider
tokenEndpoint=Access Token Endpoint URL
tokenEndpoint.help=OAuth access token endpoint URL \
This is the URL endpoint for access token retrieval provided by the OAuth Identity Provider.\
   Refer to the RFC 6749 (http://tools.ietf.org/html/rfc6749#section-3.2), section 3.2
userInfoEndpoint=User Profile Service URL
userInfoEndpoint.help=User profile information URL <p> This URL endpoint provides user profile information and is \
  provided by the OAuth Identity Provider NB This URL should return JSON objects in response <p> If this field is \
  left empty, attributes will be mapped from claims returned on the id_token and no call to the UserInfo endpoint \
  will be made.
scopeString=OAuth Scope
scopeString.help=List of user profile properties<p>According to the OAuth 2.0 Authorization Framework, \
  scope is a space-separated list of user profile attributes that the client application requires. \
  The list depends on the permissions that the resource owner grants to the client application. \
  Some authorization servers use non-standard separators for scopes.
scopeDelimiter=Scope Delimiter
scopeDelimiter.help=Delimiter used to separate scope values. Default value is space.
redirectURI=Redirect URL
provider=Social Provider
provider.help=Social Provider for which this node is being setup.
authenticationIdKey=Auth ID Key
basicAuth=Use Basic Auth
basicAuth.help=When enabled, the client will use basic auth for authenticating with the social auth provider. Enabled by default.
cfgAccountProviderClass=Account Provider
cfgAccountProviderClass.help=Name of the class implementing the account provider. \
  This class is used by the node to find the account from the attributes mapped by the Account Mapper \
  <code>org.forgerock.openam.authentication.modules.common.mapping.AccountProvider</code> interface. \
String constructor parameters can be provided by appending | separated values.
cfgAccountMapperClass=Account Mapper
cfgAccountMapperClass.help=Name of the class implementing the attribute mapping for the account search. \
This class is used by the node to map from the account information received from the OAuth Identity Provider into \
  OpenAM. The class must implement the <code>org.forgerock.openam.authentication.modules.common.mapping\
  .AttributeMapper</code> interface. Provided implementations are: <code>org.forgerock.openam.authentication.modules\
  .common.mapping.JsonAttributeMapper org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper</code> (can\
   only be used when using the openid scope) String constructor parameters can be provided by appending | separated \
  values.
cfgAttributeMappingClasses=Attribute Mapper
cfgAttributeMappingClasses.help=Name of the class that implements the attribute mapping \
This class maps the OAuth properties into OpenAM properties. A custom attribute mapper can be provided. \
A custom attribute mapper must implement the org.forgerock.openam.authentication.modules.common.mapping.AttributeMapper interface. \
Provided implementations are: org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper (can only be used when using the openid scope)
cfgAccountMapperConfiguration=Account Mapper Configuration
cfgAccountMapperConfiguration.help=Mapping of OAuth account to local OpenAM account \
Attribute configuration that will be used to map the account of the user authenticated in the OAuth 2.0 \
Provider to the local data store in the OpenAM. Example: <code>OAuth2.0_attribute=local_attribute</code>
cfgAttributeMappingConfiguration=Attribute Mapper Configuration
cfgAttributeMappingConfiguration.help=Mapping of OAuth attributes to local OpenAM attributes \
Attribute configuration that will be used to map the user info obtained from the OAuth 2.0 Provider to the local user data store in the OpenAM. \
Example: OAuth2.0_attribute=local_attribute
saveUserAttributesToSession=Save Attributes in the Session
saveUserAttributesToSession.help=If this option is enabled, the attributes configured in the attribute mapper will be saved into the OpenAM session
cfgMixUpMitigation=OAuth 2.0 Mix-Up Mitigation Enabled
cfgMixUpMitigation.help=Enables OAuth 2.0 mix-up mitigation \
The authorization server must support the OAuth 2.0 Mix-Up Mitigation draft \
  (https://tools.ietf.org/html/draft-ietf-oauth-mix-up-mitigation-01#section-3.1), \
  otherwise OpenAM will fail to validate responses from the authorization server. \
  If only the OAuth 2.0 protocol is utilized, make sure that the accepted issuer value is set in the "Token Issuer" setting.
issuer=Token Issuer
issuer.help=Required when the 'openid' scope is included. Value must match the iss field in issued ID \
  Token e.g. <code>accounts.google.com</code> The issuer value MUST be provided when OAuth 2.0 Mix-Up Mitigation is enabled.
openIdValidationMethod=OpenID Connect Validation Type
openIdValidationMethod.help=In order to validate the ID token from the OpenID Connect provider, the node needs \
  either a URL to get the public keys for the provider, or the symmetric key for an ID token signed with a \
  HMAC-based algorithm. <p> By default, the configuration type is .well-known/openid-configuration_url. This means \
  the node should retrieve the keys based on information in the OpenID Connect Provider Configuration Document. <p>\
  You can instead configure the authentication node to validate the ID token signature with the client secret key \
  you provide, or to validate the ID token with the keys retrieved from the URL to the OpenID Connect provider's \
  JSON web key set.
openIdValidationValue=OpenID Connect Validation Value
openIdValidationValue.help=Specifies the full URL to the discovery or JWK location, corresponding to the \
  configuration type selected in the OpenID Connect validation configuration type property. <p> Example: \
  https://accounts.google.com/.well-known/openid-configuration
openIdValidationMethod.WELL_KNOWN_URL=Well Known URL
openIdValidationMethod.CLIENT_SECRET=Client Secret
openIdValidationMethod.JWK_URL=JWK URL
