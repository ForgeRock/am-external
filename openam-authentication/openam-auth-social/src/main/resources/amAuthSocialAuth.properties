#
# Copyright 2017 ForgeRock AS. All Rights Reserved
#
# Use of this code requires a commercial software license with ForgeRock AS.
# or with one of its affiliates. All use shall be exclusively subject
# to such license between the licensee and ForgeRock AS.
#

# Social Auth Module Service Title
am.social.auth.oauth2.serviceTitle=Social Auth OAuth2
am.social.auth.vk.serviceTitle=Social Auth VKontakte
am.social.auth.wechat.serviceTitle=Social Auth WeChat
am.social.auth.wechat.mobile.serviceTitle=Social Auth WeChat Mobile
am.social.auth.openid.serviceTitle=Social Auth OpenID
am.social.auth.instagram.serviceTitle=Social Auth Instagram
am.social.auth.twitter.serviceTitle=Social Auth Twitter

# localization for module configuration

am.social.auth.provider=Social Provider
am.social.auth.provider.help=Social Provider for which this module is being setup.
am.social.auth.clientId=Client Id
am.social.auth.clientId.help=OAuth client_id parameter
am.social.auth.clientId.help.txt=For more information on the OAuth client_id parameter refer to the \
<a href="http://tools.ietf.org/html/rfc6749#section-2.3.1" target="_blank">RFC 6749</a>, section 2.3.1
am.social.auth.clientSecret=Client Secret
am.social.auth.clientSecret.help=OAuth client_secret parameter
am.social.auth.clientSecret.help.txt=For more information on the OAuth client_secret parameter refer to the \
<a href="http://tools.ietf.org/html/rfc6749#section-2.3.1" target="_blank">RFC 6749</a>, section 2.3.1
am.social.auth.requestTokenEndpoint=Request Token Endpoint URL
am.social.auth.requestTokenEndpoint.help=OAuth request token endpoint URL
am.social.auth.requestTokenEndpoint.help.txt=This is the URL endpoint for OAuth request token provided by the OAuth Identity Provider
am.social.auth.authorizeEndpoint=Authentication Endpoint URL
am.social.auth.authorizeEndpoint.help=OAuth authentication endpoint URL
am.social.auth.authorizeEndpoint.help.txt=This is the URL endpoint for OAuth authentication provided by the OAuth Identity Provider
am.social.auth.tokenEndpoint=Access Token Endpoint URL
am.social.auth.tokenEndpoint.help=OAuth access token endpoint URL
am.social.auth.tokenEndpoint.help.txt=This is the URL endpoint for access token retrieval provided by the OAuth Identity Provider. Refer to the \
<a href="http://tools.ietf.org/html/rfc6749#section-3.2" target="_blank">RFC 6749</a>, section 3.2
am.social.auth.userInfoEndpoint=User Profile Service URL
am.social.auth.userInfoEndpoint.help=User profile information URL
am.social.auth.userInfoEndpoint.help.txt=This URL endpoint provides user profile information and is provided by the OAuth Identity Provider<br/><br/>\
<i>NB </i>This URL should return JSON objects in response
am.social.auth.scope=Scope
am.social.auth.scope.help=OAuth scope; list of user profile properties
am.social.auth.scope.help.txt=According to the OAuth 2.0 Authorization Framework, scope is a space-separated list of user profile attributes \
that the client application requires. The list depends on the permissions that the resource owner grants to the client \
application.<br/><br/> \
Some authorization servers use non-standard separators for scopes. For example, Facebook takes a comma-separated list.<br/><br/>
am.social.auth.scopeDelimiter=Scope Delimiter
am.social.auth.scopeDelimiter.help=Delimiter used to separate scope values. Default value is space.
am.social.auth.subjectProperty=Subject Property
am.social.auth.subjectProperty.help=Property used to identify which attribute an auth server identifies a user by.
am.social.auth.usesBasicAuth=Use Basic Auth
am.social.auth.usesBasicAuth.help=When enabled, the client will use basic auth for authenticating with  the social auth provider. Enabled by default.
am.social.auth.ssoProxyUrl=Proxy URL
am.social.auth.ssoProxyUrl.help=The URL to the OpenAM OAuth proxy JSP
am.social.auth.ssoProxyUrl.help.txt=This URL should only be changed from the default, if an external server is performing the GET to POST proxying. \
The default is <code>/openam/oauth2c/OAuthProxy.jsp</code>
am.social.auth.accountProviderClass=Account Provider
am.social.auth.accountProviderClass.help=Name of the class implementing the account provider.
am.social.auth.accountProviderClass.help.txt=This class is used by the module to find the account from the attributes mapped by the Account Mapper \
  <code>org.forgerock.openam.authentication.modules.common.mapping.AccountProvider</code> interface.\
  <br/>String constructor parameters can be provided by appending <code>|</code> separated values.
am.social.auth.accountMapperClass=Account Mapper
am.social.auth.accountMapperClass.help=Name of the class implementing the attribute mapping for the account search.
am.social.auth.accountMapperClass.help.txt=This class is used by the module to map from the account information received from the OAuth Identity Provider into OpenAM.\
<br/><br/>The class must implement the <code>org.forgerock.openam.authentication.modules.common.mapping.AttributeMapper</code> interface.\
  <br/>Provided implementations are:\
  <ul><li>org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper</li>\
  <li>org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper (can only be used when using the openid scope)</li></ul>\
  String constructor parameters can be provided by appending <code>|</code> separated values.
am.social.auth.accountMapperConfiguration=Account Mapper Configuration
am.social.auth.accountMapperConfiguration.help=Mapping of OAuth account to local OpenAM account
am.social.auth.accountMapperConfiguration.help.txt=Attribute configuration that will be used to map the account of the user authenticated in the OAuth 2.0 Provider to \
the local data store in the OpenAM. Example: <code>OAuth2.0_attribute=local_attribute</code>
am.social.auth.attributeMappingClasses=Attribute Mapper
am.social.auth.attributeMappingClasses.help=Name of the class that implements the attribute mapping
am.social.auth.attributeMappingClasses.help.txt=This class maps the OAuth properties into OpenAM properties. A custom attribute mapper can be provided.<br/>\
  <br/>A custom attribute mapper must implement the \
  <code>org.forgerock.openam.authentication.modules.common.mapping.AttributeMapper</code> interface.\
  <br/>Provided implementations are:\
  <ul><li>org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper</li>\
  <li>org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper (can only be used when using the openid scope)</li></ul>\
  String constructor parameters can be provided by appending <code>|</code> separated values.
am.social.auth.attributeMapperConfiguration=Attribute Mapper Configuration
am.social.auth.attributeMapperConfiguration.help=Mapping of OAuth attributes to local OpenAM attributes
am.social.auth.attributeMapperConfiguration.help.txt=Attribute configuration that will be used to map the user info obtained from the OAuth 2.0 Provider to the local \
user data store in the OpenAM.<br/><br/>Example: <code>OAuth2.0_attribute=local_attribute</code>
am.social.auth.level=Authentication Level
am.social.auth.level.help=The authentication level associated with this module.
am.social.auth.level.help.txt=Each authentication module has an authentication level that can be used to indicate the level of security \
associated with the module; 0 is the lowest (and the default).
am.social.auth.createAccount=Create account if it does not exist
am.social.auth.createAccount.help=If the OAuth2 account does not exist in the local OpenAM data store, an account will be created dynamically.
am.social.auth.createAccount.help.txt=If this is enabled, the account mapper could create the account dynamically if there is no account mapped. Before \
creating the account, a dialog prompting for a password and asking for an activation code can be shown if the parameter "Prompt \
for password setting and activation code" is enabled.<br /><br />If this flag is not enabled, 3 alternative options exist:<br/><br/>\
<ol><li>The accounts need to have a user profile in the OpenAM User Data Store</li>\
<li>The user does not have a user profile and the "Ignore Profile" is set in the Authentication Service of the realm.</li>\
<li>The account is mapped to an anonymous account (see parameter "Map to anonymous user" and "Anonymous User")</li></ol>
am.social.auth.mapToAnonymousUser=Map to anonymous user
am.social.auth.mapToAnonymousUser.help=Enabled anonymous user access to OpenAM for OAuth authenticated users
am.social.auth.mapToAnonymousUser.help.txt=If selected, the authenticated users in the OAuth 2.0 Provider will be mapped to the anonymous user configured in the \
next parameter.<br/>If not selected the users authenticated will be mapped by the parameters configured in the account mapper.\
<br/><br/><i>NB </i>If <i>Create account if it does not exist</i> is enabled, that parameter takes precedence.
am.social.auth.anonymousUserName=Anonymous User
am.social.auth.anonymousUserName.help=Username of the OpenAM anonymous user
am.social.auth.anonymousUserName.help.txt=The username of the user that will represent the anonymous user. This user account must already exist in the realm.
am.social.auth.logoutServiceUrl=OAuth 2.0 Provider Logout Service
am.social.auth.logoutServiceUrl.help=The URL of the Identity Provider's logout service.
am.social.auth.logoutServiceUrl.help.txt=To enable IdP logout, you must also add \
<code>org.forgerock.openam.authentication.modules.oauth2.OAuth2PostAuthnPlugin</code> to the \
<em>Authentication Post Processing Classes</em> setting. Navigate to Authentication > Settings > Post Authentication Processing.
am.social.auth.logoutBehaviour=Logout Options
am.social.auth.logoutBehaviour.help=Specify logout behavior.
am.social.auth.logoutBehaviour.help.txt=The following options are available for logging out of the OAuth 2.0 Provider when the user logs out of AM:<br/>\
<ul><li>prompt: Ask the user whether to log out from the OAuth 2.0 Provider</li>\
<li>logout: Log out from the OAuth 2.0 Provider without asking the user</li>\
<li>donotlogout: Do not log out the user from the OAuth 2.0 Provider</li></ul><br/>\
To enable IdP logout, you must also add <code>org.forgerock.openam.authentication.modules.oauth2.OAuth2PostAuthnPlugin</code> \
to the <em>Authentication Post Processing Classes</em> setting. Navigate to Authentication > Settings > Post Authentication Processing.
am.social.auth.enableRegistrationService=Use IDM as Registration Service
am.social.auth.enableRegistrationService.help=Whether to use IDM as an external Registration Service to complete registration for new users.
am.social.auth.enableRegistrationService.help.txt=IDM is called and passed these parameters:<br/><br/>\
<ul><li><code>clientToken</code>: Signed, encrypted JWT of the OAuth 2.0 authentication state.</li>\
<li><code>returnParams</code>: Encoded URL parameters, required to be returned to AM to resume authentication after registration in IDM \
is complete.</li></ul>
am.social.auth.saveAttributesInSession=Save attributes in the session
am.social.auth.saveAttributesInSession.help=If this option is enabled, the attributes configured in the attribute mapper will be saved into the OpenAM session
am.social.auth.issuerName=Token Issuer
am.social.auth.issuerName.help= Required when the 'openid' scope is included. Value must match the iss field in issued ID Token\
  <br/>e.g. accounts.google.com
am.social.auth.issuerName.help.txt=The issuer value MUST be provided when OAuth 2.0 Mix-Up Mitigation is enabled.
am.social.auth.cryptoContextType=OpenID Connect validation configuration type
am.social.auth.cryptoContextType.help=Required when the 'openid' scope is included. Please select either 1. the issuer discovery url, \
  2. the issuer jwk url, or 3. the client_secret.
am.social.auth.cryptoContextValue=OpenID Connect validation configuration value
am.social.auth.cryptoContextValue.help=Required when the 'openid' scope is included. The discovery url, or jwk url, or the \
  client_secret, corresponding to the selection above.
am.social.auth.cryptoContextValue.help.txt=If discovery or jwk url entered, entry must be in valid url format, <br/>\
  e.g. https://accounts.google.com/.well-known/openid-configuration<br/>\
<i>NB </i>If client_secret entered, entry is ignored and the value of the Client Secret is used.
am.social.auth.promptPasswordFlag=Prompt for password setting and activation code
am.social.auth.promptPasswordFlag.help=Users must set a password and complete the activation flow during dynamic profile creation.
am.social.auth.promptPasswordFlag.help.txt=If this is enabled, the user must set a password before the system creates an account dynamically and an activation \
code will be sent to the user's email address. The account will be created only if the password and activation code are properly set. \
<br />If this is disabled, the account will be created transparently without prompting the user.
am.social.auth.emailAttribute=Email attribute in the Response
am.social.auth.emailAttribute.help=Attribute from the response used to send activation code emails.
am.social.auth.emailAttribute.help.txt=The attribute in the response from the profile service of the Provider that contains the email address of \
the authenticated user. This address will be used to send an email with an activation code when the accounts are allowed to be created \
dynamically.
am.social.auth.emailGateway=Mail Server Gateway implementation class
am.social.auth.emailGateway.help=The class used by the module to send email.
am.social.auth.emailGateway.help.txt=This class is used by the module to send email. A custom implementation can be provided.<br/><br/>\
The custom implementation must implement the <code>org.forgerock.openam.authentication.modules.oauth2.EmailGateway</code>
am.social.auth.smtpHost=SMTP host
am.social.auth.smtpHost.help=The mail host that will be used by the Email Gateway implementation
am.social.auth.smtpPort=SMTP port
am.social.auth.smtpPort.help=The TCP port that will be used by the SMTP gateway
am.social.auth.smtpUsername=SMTP User Name
am.social.auth.smtpUsername.help=If the SMTP Service requires authentication, configure the user name here
am.social.auth.smtpPassword=SMTP User Password
am.social.auth.smtpPassword.help=The Password of the SMTP User Name
am.social.auth.smtpSslEnabled=SMTP SSL Enabled
am.social.auth.smtpSslEnabled.help=Tick this option if the SMTP Server provides SSL
am.social.auth.smtpFromAddress=SMTP From address
am.social.auth.smtpFromAddress.help=The email address on behalf of whom the messages will be sent
am.social.auth.mixUpMitigation=OAuth 2.0 Mix-Up Mitigation enabled
am.social.auth.mixUpMitigation.help=Enables OAuth 2.0 mix-up mitigation
am.social.auth.mixUpMitigation.help.txt=The authorization server must support the \
  <a href="https://tools.ietf.org/html/draft-ietf-oauth-mix-up-mitigation-01#section-3.1">OAuth 2.0 Mix-Up Mitigation draft</a>, \
  otherwise OpenAM will fail to validate responses from the authorization server. If only the OAuth 2.0 protocol is \
  utilized, make sure that the accepted issuer value is set in the "Token Issuer" setting.
am.social.auth.apiVersion=API Version
am.social.auth.apiVersion.help=Specifies the version of the auth server API
