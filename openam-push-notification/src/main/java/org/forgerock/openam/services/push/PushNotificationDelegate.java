/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2016-2017 ForgeRock AS.
 */
package org.forgerock.openam.services.push;

import java.io.Closeable;
import java.util.Map;
import java.util.Set;

import org.forgerock.openam.services.push.dispatch.MessageDispatcher;
import org.forgerock.openam.services.push.dispatch.handlers.ClusterMessageHandler;
import org.forgerock.openam.services.push.dispatch.predicates.Predicate;
import org.forgerock.openam.services.push.sns.SnsMessageResource;
import org.forgerock.openam.services.push.sns.SnsMessageResourceRouteProvider;

/**
 * <p>A {@link PushNotificationDelegate} is an implementation of OpenAM's Push Notification Service
 * {@link PushNotificationService} specific to a realm as generated by a {@link PushNotificationDelegateFactory}.</p>
 *
 * <p>It is used for sending messages out via a Push service provider (such as Amazon's SNS) via
 * {@link #send(PushMessage)} and provides methods to retrieve its service for replies to respond at via
 * {@link #getMessageTypeEndpoint(MessageType)}. Response messages should be handled by an endpoint or service and may
 * use {@link PushMessageResource} to assist in ensuring messages return to the appropriate sender (either via local
 * memory of via the CTS). A delegate should make its {@link Predicate}s available via an appropriate mapping in
 * {@link #getMessagePredicates()} and ensure they are evaluated prior to response messages being returned to the
 * appropriate place.</p>
 *
 * <p>The {@link PushNotificationService} is responsible for monitoring configuration changes and detecting
 * when it should create new instances of any given {@link PushNotificationDelegate}. If a configuration
 * change takes place, the service will ascertain whether a new instance is required by calling
 * {@link #isRequireNewDelegate(PushNotificationServiceConfig)}.</p>
 *
 * <p>If a new instance is required, the previous instance will be shutdown by calling the {@link #close()}
 * method before creating a new instance. If a new instance is not required then the existing instance will be updated
 * by calling {@link #updateDelegate(PushNotificationServiceConfig)}.</p>
 *
 * <p>As of OpenAM 13.5, a default Amazon SNS-based endpoint {@link SnsMessageResource} is supplied with the system and
 * enabled; which is provided via the {@link SnsMessageResourceRouteProvider}. The addition of routes during OpenAM
 * operation is not yet supported, so CREST endpoint implementations should service-load their providers in.</p>
 *
 * <p>It is highly recommended that implementations of this interface who intend to utilise the ForgeRock Authenticator
 * mobile app and associated ForgeRock Authenticator (Push) login module extend the abstract class
 * {@link AbstractPushNotificationDelegate}.</p>
 *
 * <p>Implementations which operate without exposing a specific CREST endpoint may do so via the appropriate
 * {@link #startServices()} method. This service should be closed off via the {@link #close()} mechanism. A CREST
 * resource-based implementation such as the provided Amazon SNS implementation does not require the explicit addition
 * or removal of the endpoint via these methods.</p>
 *
 * <p>If a new exposed service or CREST endpoint is added, the location of this should be advertised via an appropriate
 * mapping in the {@link #getMessageTypeEndpoint(MessageType)} method.</p>
 *
 * @see AbstractPushNotificationDelegate
 *
 * @supported.all.api
 */
public interface PushNotificationDelegate extends Closeable {

    /**
     * Starts any required services for this delegate. This may include e.g. listeners to specific ports.
     * This method is called once after a new delegate is generated, but before it is made available for
     * general use by the PushNotificationService.
     *
     * @throws PushNotificationException if there were any issues starting the service.
     */
    void startServices() throws PushNotificationException;

    /**
     * Used to send a message out to the PushNotificationDelegate to be delivered.
     *
     * @param message The message to send.
     */
    void send(PushMessage message);

    /**
     * Returns whether or not the new config is so different from the old that the existing delegate
     * should be removed from the pool.
     *
     * @param newConfig The new configuration to check against the old.
     * @return True if the configuration change requires the PushNotificationService to instantiate a new instance of
     * this delegate.
     */
    boolean isRequireNewDelegate(PushNotificationServiceConfig newConfig);

    /**
     * Updates the existing delegate's config. Implementors must not alter the connection parameters
     * of the delegate, but may alter extraneous information such as values added to static fields in the
     * delegate's communicated messages.
     *
     * @param newConfig The new config from which to update the existing delegate.
     */
    void updateDelegate(PushNotificationServiceConfig newConfig);

    /**
     * Returns the (public, relative) service location of this {@link MessageType} - if appropriate.
     * Otherwise returns null.
     *
     * @param messageType The message type for the endpoint to return.
     * @return The (public, relative) service location of this delegate as exposed to the world.
     */
    String getMessageTypeEndpoint(MessageType messageType);

    /**
     * Returns the MessageDispatcher for this delegate. Used to get messages back to the originator when
     * returned through a different medium.
     *
     * @return The MessageDispatcher for this delegate.
     */
    MessageDispatcher getMessageDispatcher();

    /**
     * Returns a set of message predicates required by this delegate for the appropriate {@link DefaultMessageTypes}.
     *
     * @return A map of message types to sets of predicate delegates.
     */
    Map<MessageType, Set<Predicate>> getMessagePredicates();

    /**
     * Returns a set of message handlers required by this delegate for the appropriate {@link DefaultMessageTypes}.
     *
     * @return A map of message types to message handlers.
     */
    Map<MessageType, ClusterMessageHandler> getMessageHandlers();

}
